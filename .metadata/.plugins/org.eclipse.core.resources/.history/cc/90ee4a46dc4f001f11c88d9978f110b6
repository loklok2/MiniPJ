package com.sbs.security;

import java.io.IOException;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.exceptions.JWTVerificationException;
import com.sbs.service.MemberDetailService;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtAuthenticationFilter extends UsernamePasswordAuthenticationFilter {
    
	private final MemberDetailService memberDetailService;
    private final String jwtSecret;

    public JwtAuthenticationFilter(MemberDetailService memberDetailService, String jwtSecret) {
        this.memberDetailService = memberDetailService;
        this.jwtSecret = jwtSecret;
    }

    public void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain)
            throws IOException, ServletException {

        String authHeader = request.getHeader("Authorization");
        
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            try {
                String username = JWT.require(Algorithm.HMAC512(jwtSecret.getBytes()))
                        .build()
                        .verify(token)
                        .getSubject();

                if (username != null) {
                    UserDetails userDetails = memberDetailService.loadUserByUsername(username);
                    UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(
                            userDetails, null, userDetails.getAuthorities());
                    SecurityContextHolder.getContext().setAuthentication(authToken);
                }
            } catch (JWTVerificationException e) {
                // Handle token verification exception
                SecurityContextHolder.clearContext();
            }
        }

        // Continue the filter chain
        chain.doFilter(request, response);
    }
}
