package com.sbs.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.web.SecurityFilterChain;

import com.sbs.util.OAuth2SuccessHandler;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Configuration
@EnableWebSecurity
public class SecurityConfig {

	private final OAuth2SuccessHandler successHandler;	
	
	 @Bean
	    SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
	        http.authorizeHttpRequests(authorize -> authorize
	                .requestMatchers("/member/**").authenticated()
	                .requestMatchers("/manager/**").hasAnyRole("MANAGER", "ADMIN")
	                .requestMatchers("/admin/**").hasRole("ADMIN")
	                .anyRequest().permitAll())
	            .csrf(csrf -> csrf.disable()) // CSRF 보호 비활성화
	            .formLogin(form -> form
	                .loginPage("/login")
	                .defaultSuccessUrl("/loginSuccess", true))
	            .logout(logout -> logout
	                .invalidateHttpSession(true)
	                .deleteCookies("JSESSIONID")
	                .logoutSuccessUrl("/login"))
	            .oauth2Login(oauth2 -> oauth2
	                .loginPage("/login")
	                .successHandler(successHandler))
	            .headers(headers -> headers
	                .frameOptions().disable());

	        return http.build();
	}
		
	

}
