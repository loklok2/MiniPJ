### CommentForm 컴포넌트 상세 설명

**기능 개요**:
`CommentForm` 컴포넌트는 사용자가 특정 게시물에 댓글을 작성할 수 있도록 하는 폼입니다. 사용자가 텍스트를 입력하고 댓글을 제출하면, 이 컴포넌트는 서버에 요청을 보내 댓글을 저장하며, 새로 작성된 댓글을 상위 컴포넌트로 전달합니다.

**주요 구성 요소**:

1. **상태 관리**:
   - `content`: 사용자가 입력한 댓글 내용을 저장하는 상태입니다. `useState` 훅을 사용하여 관리되며, 텍스트 영역의 값으로 바인딩됩니다. 사용자가 텍스트 영역에 글을 입력하면, `setContent` 함수를 통해 `content` 상태가 업데이트됩니다.
   - `token`: 사용자의 인증 토큰을 저장하는 상태입니다. `useAuthToken` 훅을 사용하여 가져오며, 서버에 요청을 보낼 때 JWT 토큰을 사용해 인증합니다.

2. **로그인 여부 확인**:
   - `useEffect` 훅을 사용하여 컴포넌트가 처음 렌더링될 때 사용자가 로그인되어 있는지 확인합니다. 사용자가 로그인되어 있지 않다면, `navigate`를 사용해 로그인 페이지로 리디렉션됩니다.

3. **댓글 제출 로직**:
   - `handleSubmit` 함수는 사용자가 폼을 제출할 때 호출됩니다. 이 함수는 먼저 댓글 내용이 비어있는지 확인한 후, 서버에 댓글 작성 요청을 보냅니다.
   - 서버에서 요청이 성공적으로 처리되면 새로 작성된 댓글 데이터를 받아와 `content` 상태를 초기화하고, `onCommentSubmit` 콜백을 통해 상위 컴포넌트로 전달합니다.
   - 만약 요청이 실패하면, 에러를 콘솔에 출력하고 사용자에게 알립니다.

4. **키보드 이벤트 처리**:
   - `handleKeyDown` 함수는 사용자가 텍스트 영역에서 Enter 키를 눌렀을 때 호출됩니다. 만약 Shift 키와 함께 Enter를 누르지 않은 경우, 기본 Enter 동작(줄 바꿈)을 방지하고 댓글을 제출하도록 처리합니다.

5. **UI 구성**:
   - 텍스트 영역(`<textarea>`)과 제출 버튼(`<button>`)으로 구성되어 있습니다.
   - 텍스트 영역은 사용자로부터 댓글 내용을 입력받으며, 버튼은 댓글을 제출하기 위한 역할을 합니다.
   - Tailwind CSS를 사용하여 스타일링이 적용되어 있습니다. 예를 들어, `w-full`, `bg-blue-500` 등의 클래스를 사용하여 버튼의 너비, 배경색 등을 설정합니다.

**사용 시나리오**:
- 이 컴포넌트는 댓글 기능이 필요한 게시물 상세 페이지와 같은 곳에서 사용됩니다. 예를 들어, 사용자가 특정 게시물에 대해 의견을 남기고 싶을 때 이 폼을 통해 댓글을 작성할 수 있습니다. 댓글 작성이 완료되면, 해당 댓글이 바로 페이지에 반영되어 다른 사용자와 상호작용할 수 있게 됩니다.

**동작 흐름**:
1. 사용자가 페이지에 진입하면 `useEffect`를 통해 사용자의 로그인 상태를 확인합니다. 로그인되지 않은 사용자는 로그인 페이지로 리디렉션됩니다.
2. 사용자가 텍스트 영역에 댓글을 작성합니다.
3. 사용자가 Enter 키를 누르거나, 댓글 작성 버튼을 클릭하면 `handleSubmit` 함수가 실행되어 서버로 댓글 작성 요청을 보냅니다.
4. 요청이 성공적으로 완료되면 댓글이 상위 컴포넌트에 전달되어 댓글 리스트에 추가됩니다. 요청이 실패하면, 에러 메시지가 콘솔에 출력됩니다.

이 컴포넌트는 게시물에 대한 댓글 작성 기능을 직관적으로 제공하며, 인증과 상태 관리, 서버와의 상호작용을 포함하는 중요한 역할을 합니다.



### Tailwind CSS 스타일 상세 설명

`CommentForm` 컴포넌트에서 사용된 Tailwind CSS 클래스들은 UI 요소를 꾸미고 레이아웃을 설정하는 데 사용됩니다. 아래는 각 클래스의 역할과 효과를 설명합니다.

1. **`w-full`**
   - **설명**: 해당 요소의 너비를 부모 요소의 100%로 설정합니다.
   - **적용 요소**: `<textarea>`
   - **효과**: 텍스트 입력 영역이 가능한 넓게 화면을 차지하도록 합니다.

2. **`mt-1`**
   - **설명**: 위쪽 마진을 Tailwind의 기본 간격(보통 4px)의 1배로 설정합니다.
   - **적용 요소**: `<textarea>`
   - **효과**: 텍스트 영역과 상위 요소 사이에 약간의 간격을 둡니다.

3. **`block`**
   - **설명**: 요소를 블록 요소로 설정하여, 너비를 부모 요소에 맞추고 아래로 쌓이도록 합니다.
   - **적용 요소**: `<textarea>`
   - **효과**: 텍스트 영역이 한 줄에 전체 너비를 차지하게 합니다.

4. **`border border-gray-300`**
   - **설명**: 요소에 테두리를 설정하며, `border-gray-300`은 테두리 색상을 회색(#D1D5DB)으로 지정합니다.
   - **적용 요소**: `<textarea>`
   - **효과**: 텍스트 영역에 연한 회색 테두리를 추가하여 입력 필드임을 명확히 나타냅니다.

5. **`rounded-md`**
   - **설명**: 요소의 모서리를 중간 정도의 반경으로 둥글게 만듭니다.
   - **적용 요소**: `<textarea>`, `<button>`
   - **효과**: 텍스트 영역과 버튼의 모서리가 부드럽게 둥글어집니다.

6. **`shadow-sm`**
   - **설명**: 요소에 작은 그림자를 추가하여 약간의 깊이감을 줍니다.
   - **적용 요소**: `<textarea>`
   - **효과**: 텍스트 영역이 살짝 떠 있는 느낌을 줍니다.

7. **`focus:border-blue-500`**
   - **설명**: 요소가 포커스를 받을 때 테두리 색상을 파란색(#3B82F6)으로 변경합니다.
   - **적용 요소**: `<textarea>`
   - **효과**: 사용자가 텍스트 영역을 클릭하거나 탭으로 선택했을 때 테두리 색상이 파란색으로 변합니다.

8. **`focus:ring focus:ring-blue-500 focus:ring-opacity-50`**
   - **설명**: 포커스를 받을 때 파란색(#3B82F6) 아웃라인과 반투명 효과를 추가합니다. `focus:ring-opacity-50`은 반투명도 50%를 의미합니다.
   - **적용 요소**: `<textarea>`, `<button>`
   - **효과**: 요소에 포커스가 맞춰졌을 때 요소의 외곽에 파란색 반투명 링이 표시되어 사용자 피드백을 제공합니다.

9. **`mt-2`**
   - **설명**: 위쪽 마진을 Tailwind의 기본 간격의 2배로 설정합니다.
   - **적용 요소**: `<button>`
   - **효과**: 텍스트 영역과 버튼 사이에 여유로운 간격을 제공합니다.

10. **`py-2 px-4`**
    - **설명**: 수직(`py`)과 수평(`px`) 방향으로 각각 0.5rem(8px)과 1rem(16px)의 패딩을 추가합니다.
    - **적용 요소**: `<button>`
    - **효과**: 버튼 내 텍스트와 버튼 가장자리 사이에 적절한 공간을 제공합니다.

11. **`bg-blue-500`**
    - **설명**: 배경색을 Tailwind의 기본 파란색(#3B82F6)으로 설정합니다.
    - **적용 요소**: `<button>`
    - **효과**: 버튼이 파란색 배경을 가지게 합니다.

12. **`text-white`**
    - **설명**: 텍스트 색상을 흰색으로 설정합니다.
    - **적용 요소**: `<button>`
    - **효과**: 버튼 안의 텍스트가 흰색으로 표시됩니다.

13. **`hover:bg-blue-600`**
    - **설명**: 사용자가 버튼 위에 마우스를 올렸을 때 배경색을 조금 더 진한 파란색(#2563EB)으로 변경합니다.
    - **적용 요소**: `<button>`
    - **효과**: 마우스 오버 시 버튼이 색상 변화를 통해 사용자에게 피드백을 제공합니다.

14. **`focus:outline-none`**
    - **설명**: 요소가 포커스를 받을 때 기본 테두리(아웃라인)를 제거합니다.
    - **적용 요소**: `<button>`
    - **효과**: 포커스 상태에서 브라우저의 기본 아웃라인이 나타나지 않도록 합니다.

15. **`focus:ring-2`**
    - **설명**: 포커스가 있을 때 2px 두께의 링을 추가합니다.
    - **적용 요소**: `<button>`
    - **효과**: 버튼이 포커스를 받을 때 두께가 2px인 링이 표시되어 시각적 강조를 합니다.

16. **`focus:ring-blue-500`**
    - **설명**: 포커스 링의 색상을 파란색(#3B82F6)으로 설정합니다.
    - **적용 요소**: `<button>`
    - **효과**: 포커스 시 파란색 링이 표시됩니다.

17. **`focus:ring-opacity-50`**
    - **설명**: 포커스 링의 투명도를 50%로 설정합니다.
    - **적용 요소**: `<button>`
    - **효과**: 링이 반투명하게 보여서 더 부드러운 효과를 줍니다.

### 요약

이 컴포넌트는 Tailwind CSS를 활용해 사용자 인터페이스(UI)를 직관적이고 반응성 있게 디자인했습니다. `textarea`와 `button` 요소 모두, 사용자와 상호작용 시 시각적인 피드백을 제공하여 사용자의 경험을 향상시키며, 다양한 장치에서 일관된 디자인을 유지합니다.




### 코드 리뷰 상세 설명

#### 1. **기능과 역할**
   - 이 `CommentForm` 컴포넌트는 사용자가 댓글을 입력하고 제출할 수 있도록 하는 기능을 제공합니다. 사용자가 댓글을 입력하고 `Enter` 키를 누르거나 제출 버튼을 클릭하면 댓글이 서버로 전송되고, 전송된 댓글은 부모 컴포넌트로 전달됩니다. 로그인된 사용자가 아니라면, 로그인 페이지로 리디렉션합니다.

#### 2. **상태 관리 (`useState` 및 `useEffect`)**
   - **`content` 상태**: 사용자가 입력한 댓글 내용을 관리합니다. 댓글을 입력할 때마다 `setContent`가 호출되어 상태가 업데이트됩니다.
   - **`useEffect` 훅**: 컴포넌트가 마운트될 때와 `token`이 변경될 때 실행됩니다. 이 훅은 사용자가 로그인이 되어 있지 않은 경우 로그인 페이지로 리디렉션합니다.

#### 3. **토큰 관리 (`useAuthToken` 훅 사용)**
   - `useAuthToken` 훅을 통해 JWT 토큰을 가져와 사용합니다. 토큰이 없는 경우 사용자가 로그아웃된 상태로 간주하고 로그인 페이지로 리디렉션합니다.
   - 이 방법은 사용자 인증 상태를 확인하고 보호된 자원에 접근하려 할 때 사용자에게 적절한 경험을 제공합니다.

#### 4. **핸들러 함수 (`handleSubmit` 및 `handleKeyDown`)**
   - **`handleSubmit` 함수**: 사용자가 댓글을 제출할 때 호출됩니다. 이 함수는 댓글 내용이 비어 있는지 확인한 후, 서버에 댓글 데이터를 POST 요청으로 전송합니다. 요청이 성공하면 댓글이 초기화되고, 새로운 댓글이 부모 컴포넌트에 전달됩니다.
   - **`handleKeyDown` 함수**: 사용자가 `Enter` 키를 누를 때, 기본적으로 줄 바꿈이 아니라 댓글을 제출하도록 처리합니다. 이를 통해 사용자 경험을 개선합니다.

#### 5. **서버와의 통신**
   - 댓글 작성 시 `fetch` API를 통해 서버와 통신합니다. 이때, `Authorization` 헤더에 JWT 토큰을 포함하여 인증된 요청을 보냅니다. 요청이 실패할 경우 에러를 처리하여 사용자에게 적절한 피드백을 제공합니다.

#### 6. **UX 개선**
   - **`handleKeyDown`**: 사용자가 `Enter` 키를 눌렀을 때 댓글이 바로 제출되도록 하여 사용자 경험을 개선했습니다. 이는 사용자들이 쉽게 댓글을 남길 수 있도록 돕습니다.
   - **에러 핸들링**: `handleSubmit` 함수 내에서 서버 응답이 실패하면 사용자에게 경고 메시지를 출력하는 구조로 되어 있습니다. 이는 사용자에게 즉각적인 피드백을 주어 문제가 발생했음을 인지하게 합니다.

#### 7. **보안**
   - 모든 서버 요청에는 JWT 토큰이 포함되어 있어, 인증되지 않은 사용자가 댓글을 작성할 수 없도록 보안이 강화되었습니다. 또한, 인증되지 않은 사용자는 로그인 페이지로 리디렉션되어, 무단 접근을 방지합니다.

#### 8. **코드 가독성**
   - 코드의 가독성이 높으며, 각 기능이 명확히 분리되어 있습니다. 상태 관리, 이벤트 처리, 서버 통신 등이 명확히 구분되어 있어 유지보수가 용이합니다.
   - `console.log`가 개발 중 디버깅 목적으로 포함되어 있으나, 프로덕션 코드에서는 제거해야 합니다.

#### 9. **개선할 점**
   - **에러 처리 강화**: 현재 `alert`를 통해 에러 메시지를 출력하고 있으나, 사용자 경험을 더 개선하기 위해 UI에서 에러를 표시하는 방법을 고려할 수 있습니다.
   - **로딩 상태 관리**: 댓글이 전송되는 동안 로딩 상태를 표시하여, 사용자에게 피드백을 제공할 수 있습니다.
   - **코드 중복 제거**: `handleSubmit`과 `handleKeyDown` 함수의 유사한 로직을 별도의 함수로 추출하여 중복을 줄일 수 있습니다.

이 컴포넌트는 사용자의 편의를 고려한 설계와 보안 강화를 동시에 달성하고 있어, 기본적인 댓글 작성 기능을 효율적으로 제공합니다. 단, 추가적인 UI 피드백 요소와 개선 사항을 반영하면 더 나은 사용자 경험을 제공할 수 있습니다.