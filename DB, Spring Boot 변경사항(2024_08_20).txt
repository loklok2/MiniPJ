CommentController --- 댓글수정, updateComment() 메서드의 newContent 객체가 @RequestBody, String 이 이중파싱 이르킴

CommentController --- 특정 댓글 상세 조회 (검색 필터로 특정 댓글만 조회하여 상세보기 하는 기능) 필요없을 듯

------------------------------------------------------------------------------------------------------------------------------------

OAUTH2 로그인 관련


서버 측 OAuth2 로그인 기능은 구현되어 있지만, 개선할 부분이 있습니다. 현재 제공된 코드는 기본적인 OAuth2 로그인과 JWT 토큰 인증을 설정하고 있으며, OAuth2 로그인 성공 시 사용자 정보를 처리하는 OAuth2SuccessHandler를 통해 추가 로직을 구현하고 있습니다. 아래는 주요한 구현 포인트와 함께 개선이 필요한 부분을 설명합니다.

1. OAuth2SuccessHandler의 구현
코드에는 OAuth2SuccessHandler가 사용되었으나, 이 핸들러의 실제 구현이 제공되지 않았습니다. 성공 시 처리할 로직을 작성해야 합니다. 예를 들어, OAuth2 로그인 성공 후 사용자 정보를 DB에 저장하거나, JWT 토큰을 발급하는 작업이 이곳에서 이루어질 수 있습니다.
2. OAuth2User Service의 구현
현재는 OAuth2User의 데이터를 처리하는 부분이 없습니다. 이를 위해 CustomOAuth2UserService 클래스를 생성하고, OAuth2UserService<OAuth2UserRequest, OAuth2User>를 구현해야 합니다. 이 서비스에서는 OAuth2 공급자(Google, Facebook 등)로부터 받은 사용자 정보를 처리하여 필요한 사용자 정보를 가져오고, 이를 OAuth2SuccessHandler에 전달할 수 있습니다.
3. JWT 토큰 발급 및 인증
SecurityConfig에서 JWTAuthorizationFilter를 추가하고 있습니다. 이 필터는 모든 요청에서 JWT 토큰을 확인하며, 유효한 토큰이 있는 경우 인증을 처리합니다.
다만, OAuth2 로그인 후 JWT 토큰 발급 및 사용에 대한 로직이 완전하게 구현되어 있는지 확인해야 합니다. 예를 들어, OAuth2 로그인 성공 시 사용자에게 JWT 토큰을 발급하고, 이를 응답으로 반환하는 로직이 필요합니다.
4. 회원 관리 및 인증 로직
MemberService에서 사용자의 이메일 인증 여부를 확인하고, 비밀번호 재설정 기능을 제공하고 있습니다. 이는 자체 회원 관리와 OAuth2 사용자 관리를 함께 수행할 수 있도록 하는 중요한 부분입니다.
다만, OAuth2 로그인한 사용자와 자체 회원 관리 기능을 어떻게 통합할지에 대한 정책이 필요합니다. 예를 들어, OAuth2 사용자도 자체 DB에 저장할 것인지, 아니면 OAuth2 로그인을 통해만 접근하도록 할 것인지 결정해야 합니다.
5. 테스트 및 검증
OAuth2 로그인 및 JWT 인증 기능이 제대로 작동하는지 테스트해야 합니다. 실제 OAuth2 공급자(Google, Facebook 등)와의 통합 테스트를 통해 로그인 흐름이 정상적으로 작동하는지 확인이 필요합니다.
결론
OAuth2 로그인 기능은 기본적으로 설정되어 있지만, OAuth2SuccessHandler의 구현, OAuth2User 처리, JWT 토큰 발급 및 관리 등의 세부 사항을 더 완성해야 합니다. 이 부분들을 추가로 구현하고 테스트를 통해 확인함으로써 완전한 OAuth2 인증 기능을 갖출 수 있을 것입니다.


OAuth2 공급자 콘솔(예: Google Cloud Console, Naver Developers, Kakao Developers)에서 리디렉션 URI가 서버의 설정과